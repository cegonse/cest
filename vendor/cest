#pragma once

#include <csetjmp>
#include <csignal>
#include <cstring>
#include <functional>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <regex>
#include <chrono>
#include <random>

#define ASCII_BACKGROUND_GREEN   "\u001b[42m"
#define ASCII_BACKGROUND_YELLOW  "\u001b[43m"
#define ASCII_BACKGROUND_RED     "\u001b[41m"
#define ASCII_BACKGROUND_MAGENTA "\u001b[45;1m"
#define ASCII_RED                "\033[1m\033[31m"
#define ASCII_GREEN              "\033[1m\033[32m"
#define ASCII_GRAY               "\u001b[38;5;243m"
#define ASCII_BLACK              "\u001b[38;5;232m"
#define ASCII_BOLD               "\u001b[1m"
#define ASCII_RESET              "\033[0m"
#define TEST_NAME_LENGTH         4096
#define CLIP_STRING_LENGTH       16

#define describe(...)           std::string test_suite_name = cest::describeFunction(__VA_ARGS__)
#define it(...)                 cest::itFunction(__FILE__, __LINE__, __VA_ARGS__)
#define xit(...)                cest::xitFunction(__FILE__, __LINE__, __VA_ARGS__)
#define fit(...)                cest::fitFunction(__FILE__, __LINE__, __VA_ARGS__)
#define expect(...)             cest::expectFunction(__FILE__, __LINE__, __VA_ARGS__)
#define beforeEach(x)           cest::beforeEachFunction(x)
#define afterEach(x)            cest::afterEachFunction(x)
#define beforeAll(x)            cest::beforeAllFunction(x)
#define afterAll(x)             cest::afterAllFunction(x)
#define passTest()              cest::forcedPass()
#define failTest()              cest::forcedFailure(__FILE__, __LINE__)
#define Regex(x)                x, std::regex(x)


namespace cest
{
    struct TestCase {
        std::string name;
        std::string file;
        int line;
        std::function<void()> test;
        bool test_failed;
        bool forced_pass;
        bool skip;
        bool fit;
        std::string failure_message;

        TestCase() : test_failed(false), forced_pass(false), skip(false)
        {
        }
    };

    struct TestSuite {
        std::vector<cest::TestCase *> test_cases;
        std::string test_suite_name;
    };

    struct CommandLineOptions {
        bool quiet;
        bool help;
        bool randomize;
        unsigned int random_seed;
        bool random_seed_present;
        bool generate_test_report;
    };
}

std::vector<cest::TestCase *> test_cases;
extern std::string test_suite_name;
std::function<void()> before_each;
std::function<void()> after_each;
std::function<void()> before_all;
std::function<void()> after_all;
std::stringstream assertion_failures;
bool current_test_failed;
cest::TestCase *current_test_case;
cest::CommandLineOptions command_line_options;
jmp_buf jump_env;
unsigned int random_seed;


namespace cest
{
    class AssertionError : public std::exception {};
    class ForcedPassError : public std::exception {};

    std::string describeFunction(std::string test_name, std::function<void()> test)
    {
        test();
        return test_name;
    }

    void itFunction(std::string file, int line, std::string name, std::function<void()> test)
    {
        TestCase *test_case = new TestCase();
        
        test_case->name = name;
        test_case->file = file;
        test_case->test = test;
        test_case->line = line;
        test_case->skip = false;
        test_case->fit = false;

        test_cases.push_back(test_case);
    }

    void xitFunction(std::string file, int line, std::string name, std::function<void()> test)
    {
        TestCase *test_case = new TestCase();
        
        test_case->name = name;
        test_case->file = file;
        test_case->test = test;
        test_case->line = line;
        test_case->skip = true;
        test_case->fit = false;

        test_cases.push_back(test_case);
    }

    void fitFunction(std::string file, int line, std::string name, std::function<void()> test)
    {
        TestCase *test_case = new TestCase();
        
        test_case->name = name;
        test_case->file = file;
        test_case->test = test;
        test_case->line = line;
        test_case->skip = false;
        test_case->fit = true;

        test_cases.push_back(test_case);
    }

    void forcedPass()
    {
        throw ForcedPassError();
    }

    template <class T>
    class Parameter {
        public:
            Parameter() {}

            Parameter<T> withValue(T v) {
                values.push_back(v);
                return *this;
            }

            void thenDo(std::function<void(T)> call) {
                for (T v : values) {
                    call(v);
                }
            }

        private:
            std::vector<T> values;
    };

    template <class T>
    Parameter<T> withParameter()
    {
        return Parameter<T>();
    }

    void appendAssertionFailure(std::stringstream *stream, std::string message, std::string file, int line)
    {
        (*stream) << ASCII_RED << "    ❌ Assertion Failed:" << ASCII_RESET << " " << message << std::endl;
        (*stream) << "                        " << file << ":" << line << std::endl;
    }

    void forcedFailure(std::string file, int line)
    {
        current_test_failed = true;
        current_test_case->failure_message = "Test failure forced manually";

        appendAssertionFailure(&assertion_failures, current_test_case->failure_message, file, line);

        throw AssertionError();
    }

    void beforeEachFunction(std::function<void()> func)
    {
        before_each = func;
    }

    void afterEachFunction(std::function<void()> func)
    {
        after_each = func;
    }

    void beforeAllFunction(std::function<void()> func)
    {
        before_all = func;
    }

    void afterAllFunction(std::function<void()> func)
    {
        after_all = func;
    }

    template<class T>
    void assertRaises(std::function<void()> expression)
    {
        int line = current_test_case->line;
        std::string file = current_test_case->file;

        try {
            expression();
        } catch (const T& err) {
            return;
        } catch (const std::exception& err) {
            current_test_failed = true;
            current_test_case->failure_message = "Expected exception not raised";
            appendAssertionFailure(&assertion_failures, current_test_case->failure_message, file, line);
        }

        current_test_failed = true;
        current_test_case->failure_message = "Expected exception not raised";
        appendAssertionFailure(&assertion_failures, current_test_case->failure_message, file, line);
    }

    template<class T>
    class Assertion
    {
        public:
            Assertion(const char *file, int line, T value)
            {
                actual = value;
                assertion_file = std::string(file);
                assertion_line = line;
            }

            void toBeTruthy()
            {
                if (!actual) {
                    current_test_failed = true;
                    failure_message << "Expresion is not truthy";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toBeFalsy()
            {
                if (actual) {
                    current_test_failed = true;
                    failure_message << "Expresion is not falsy";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toBe(T expected)
            {
                if (expected != actual) {
                    current_test_failed = true;
                    failure_message << "Expected " << expected << ", was " << actual;
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toEqual(T expected)
            {
                toBe(expected);
            }

            void toEqualMemory(T expected, int64_t length)
            {
                int i;

                for (i=0; i<length; ++i) {
                    if (expected[i] != actual[i]) {
                        current_test_failed = true;
                        failure_message << "Memory mismatch at byte " << i << ", expected ";
                        failure_message << std::hex << std::uppercase << (int)expected[i] << " but was " << std::hex << std::uppercase << (int)actual[i];
                        current_test_case->failure_message = failure_message.str();

                        appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                        throw AssertionError();
                    }
                }
            }

            void toBeNotNull()
            {
                if (actual == NULL) {
                    current_test_failed = true;
                    failure_message << "Expected 0x" << std::hex << std::uppercase << actual << " to be not null";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toBeNull()
            {
                if (actual != NULL) {
                    current_test_failed = true;
                    failure_message << "Expected 0x" << std::hex << std::uppercase << actual << " to be null";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

        private:
            T actual;
            std::string assertion_file;
            std::stringstream failure_message;
            int assertion_line;
    };

    template <class T>
    class Assertion<std::vector<T> >
    {
        public:
            Assertion(const char *file, int line, std::vector<T> value)
            {
                actual = value;
                assertion_file = std::string(file);
                assertion_line = line;
            }

            void toBe(std::vector<T> expected)
            {
                if (expected.size() != actual.size()) {
                    current_test_failed = true;
                    failure_message << "Vector sizes do not match, expected " << expected.size() << " items but had " << actual.size() << " items";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }

                for (size_t i=0; i<expected.size(); ++i) {
                    if (expected[i] != actual[i]) {
                        current_test_failed = true;
                        failure_message << "Vector item mismatch at position " << i << ", expected " << expected[i] << " but was " << actual[i];
                        current_test_case->failure_message = failure_message.str();

                        appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                        throw AssertionError();
                    }
                }
            }

            void toEqual(std::vector<T> expected)
            {
                toBe(expected);
            }

            void toContain(T item)
            {
                bool found = false;

                for (size_t i=0; i<actual.size(); ++i) {
                    if (actual[i] == item) {
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    current_test_failed = true;
                    failure_message << "Item " << item << " not found in vector";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toHaveLength(size_t size)
            {
                if (actual.size() != size) {
                    current_test_failed = true;
                    failure_message << "Vector sizes does not match, expected " << size << " items but had " << actual.size() << " items";
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

        private:
            std::vector<T> actual;
            std::string assertion_file;
            std::stringstream failure_message;
            int assertion_line;
    };

    template <>
    class Assertion<std::string>
    {
        public:
            Assertion(const char *file, int line, std::string value)
            {
                actual = value;
                assertion_file = std::string(file);
                assertion_line = line;
            }

            void toBe(std::string expected)
            {
                if (expected != actual) {
                    current_test_failed = true;
                    if (expected.size() > CLIP_STRING_LENGTH || actual.size() > CLIP_STRING_LENGTH) {
                        failure_message << "String mismatch," << std::endl;
                        failure_message << "  Expected: \"" << expected << "\"" << std::endl;
                        failure_message << "  Actual  : \"" << actual << "\"";
                    } else {
                        failure_message << "Expected \"" << expected << "\", was \"" << actual << "\"";
                    }

                    current_test_case->failure_message = failure_message.str();
                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toMatch(std::string expected)
            {
                toContain(expected);
            }

            void toMatch(std::string expected_string, std::regex expected)
            {
                if (!std::regex_search(actual, expected)) {
                    current_test_failed = true;
                    if (expected_string.size() > CLIP_STRING_LENGTH || actual.size() > CLIP_STRING_LENGTH) {
                        failure_message << "Expected pattern mismatch," << std::endl;
                        failure_message << "  Regexp: \"" << expected_string << "\"" << std::endl;
                        failure_message << "  Actual: \"" << actual << "\"";
                    } else {
                        failure_message << "Expected pattern \"" << expected_string << "\" did not match with \"" << actual << "\"";
                    }

                    current_test_case->failure_message = failure_message.str();
                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toEqual(std::string expected)
            {
                toBe(expected);
            }

            void toContain(std::string expected)
            {
                if (actual.find(expected) == std::string::npos) {
                    current_test_failed = true;

                    if (expected.size() > CLIP_STRING_LENGTH || actual.size() > CLIP_STRING_LENGTH) {
                        failure_message << "Substring not found," << std::endl;
                        failure_message << "  Expected: \"" << expected << "\"" << std::endl;
                        failure_message << "  Actual  : \"" << actual << "\"";
                    } else {
                        failure_message << "\"" << expected << "\" not present inside \"" << actual << "\"";
                    }

                    current_test_case->failure_message = failure_message.str();
                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

            void toHaveLength(size_t length)
            {
                if (actual.length() != length) {
                    current_test_failed = true;
                    failure_message << "Length of \"" << actual << "\" expected to be " << length << ", was " << actual.length();
                    current_test_case->failure_message = failure_message.str();

                    appendAssertionFailure(&assertion_failures, current_test_case->failure_message, assertion_file, assertion_line);
                    throw AssertionError();
                }
            }

        private:
            std::string actual;
            std::string assertion_file;
            std::stringstream failure_message;
            int assertion_line;
    };

    template<class T>
    Assertion<T> expectFunction(const char *file, int line, T actual)
    {
        return Assertion<T>(file, line, actual);
    }

    Assertion<bool> expectFunction(const char *file, int line, bool actual)
    {
        return Assertion<bool>(file, line, actual);
    }

    Assertion<int64_t> expectFunction(const char *file, int line, int64_t actual)
    {
        return Assertion<int64_t>(file, line, actual);
    }

    Assertion<std::string> expectFunction(const char *file, int line, std::string actual)
    {
        return Assertion<std::string>(file, line, actual);
    }

    Assertion<std::string> expectFunction(const char *file, int line, const char *actual)
    {
        return Assertion<std::string>(file, line, (std::string)actual);
    }

    void emitStringField(std::stringstream *stream, std::string key, std::string value, bool add_comma)
    {
        (*stream) << "\"" << key << "\":" << "\"" << value << "\"" << (add_comma? "," : "");
    }

    void emitIntegerField(std::stringstream *stream, std::string key, int value, bool add_comma)
    {
        (*stream) << "\"" << key << "\":" << value << (add_comma? "," : "");
    }

    void emitBooleanField(std::stringstream *stream, std::string key, bool value, bool add_comma)
    {
        (*stream) << "\"" << key << "\":" << (value ? "true" : "false") << (add_comma? "," : "");
    }

    int countFailedTests(std::vector<TestCase *> test_cases)
    {
        int failed_tests = 0;

        for (TestCase *test : test_cases) {
            if (test->test_failed) {
                failed_tests++;
            }
        }

        return failed_tests;
    }

    int countSkippedTests(std::vector<TestCase *> test_cases)
    {
        int skipped_tests = 0;

        for (TestCase *test : test_cases) {
            if (test->skip) {
                skipped_tests++;
            }
        }

        return skipped_tests;
    }

    std::string replace_all(std::string text, std::string from, std::string to)
    {
    size_t start=0;

        while ((start = text.find(from, start)) != std::string::npos) {
            text.replace(start, from.length(), to);
            start += to.length();
        }

        return text;
    }

    std::string sanitize(std::string text)
    {
        std::string from("\"");
        std::string to("\\\"");

        text = replace_all(text, "\\", "\\\\");
        text = replace_all(text, "\"", "\\\"");
        text = replace_all(text, "\n", "\\n");

        return text;
    }

    std::string generateSuiteReport(TestSuite test_suite)
    {
        std::stringstream suite_report;

        suite_report << "{";

        emitStringField(&suite_report, "name", test_suite.test_suite_name, true);
        emitIntegerField(&suite_report, "tests", test_suite.test_cases.size(), true);
        emitIntegerField(&suite_report, "failures", countFailedTests(test_suite.test_cases), true);
        emitIntegerField(&suite_report, "errors", 0, true);
        emitIntegerField(&suite_report, "skipped", countSkippedTests(test_suite.test_cases), true);
        emitStringField(&suite_report, "time", "", true);
        emitStringField(&suite_report, "timestamp", "", true);
        emitStringField(&suite_report, "hostname", "", true);

        suite_report << "\"test_cases\":[";

        for (size_t i=0; i<test_suite.test_cases.size(); ++i) {
            suite_report << "{";
            emitStringField(&suite_report, "name", test_suite.test_cases[i]->name, true);
            emitStringField(&suite_report, "time", "", test_suite.test_cases[i]->test_failed || test_suite.test_cases[i]->skip);

            if (test_suite.test_cases[i]->test_failed) {
                emitStringField(&suite_report, "failure_message", sanitize(test_suite.test_cases[i]->failure_message), false);
            }

            if (test_suite.test_cases[i]->skip) {
                emitBooleanField(&suite_report, "skipped", test_suite.test_cases[i]->skip, false);
            }

            suite_report << "}" << (i==test_suite.test_cases.size()-1? "" : ",");
        }

        suite_report << "]}";

        return suite_report.str();
    }

    void printTestResult(TestCase *test_case)
    {
        if (command_line_options.quiet) {
            if (test_case->test_failed) {
                std::cout << ASCII_RED << "F" << ASCII_RESET;
            } else {
                std::cout << ".";
            }

            return;
        }

        if (test_case->test_failed) {
            std::cout <<  ASCII_BACKGROUND_RED << ASCII_BLACK << ASCII_BOLD << " FAIL " << ASCII_RESET;
        } else if (test_case->skip) {
            std::cout << ASCII_BACKGROUND_YELLOW << ASCII_BLACK << ASCII_BOLD << " SKIP " << ASCII_RESET;
        } else {
            std::cout << ASCII_BACKGROUND_GREEN << ASCII_BLACK << ASCII_BOLD << " PASS " << ASCII_RESET;
        }

        std::cout <<
            ASCII_GRAY << " " << test_case->file << ":" << test_case->line << ASCII_RESET <<
            ASCII_BOLD << " it " << test_case->name << ASCII_RESET <<
            std::endl;

        std::cout << assertion_failures.str();
        assertion_failures.str(std::string());
    }

    void writeTestSummaryToFile(TestSuite test_suite)
    {
        std::ofstream summary_file;
        std::stringstream file_name;

        file_name << test_suite_name << "_summary.jsonl";
        summary_file.open(file_name.str(), std::ios_base::trunc);
        summary_file << generateSuiteReport(test_suite) << std::endl;
        summary_file.close();
    }

    bool anyTestFailed()
    {
        return std::any_of(test_cases.begin(), test_cases.end(), [](cest::TestCase *test_case) {
            return test_case->test_failed;
        });
    }

    void handleFailedTest(TestCase *test_case)
    {
        current_test_failed = true;
        test_case->test_failed = true;
    }

    void handleTestException(TestCase *test_case, const std::exception& error)
    {
        std::string exception_message("Unhandled exception in test case: ");

        exception_message += error.what();

        appendAssertionFailure(&assertion_failures, exception_message, test_case->file, test_case->line);
        handleFailedTest(test_case);
    }

    cest::CommandLineOptions parseArgs(int argc, const char *argv[])
    {
        cest::CommandLineOptions options = {0};

        if (argc > 1) {
            for (int i=0; i<argc; ++i) {
                if (strcmp(argv[i], "--quiet") == 0 || strcmp(argv[i], "-q") == 0) {
                    options.quiet = true;
                }

                if (strcmp(argv[i], "--help") == 0 || strcmp(argv[i], "-h") == 0) {
                    options.help = true;
                }

                if (strcmp(argv[i], "-r") == 0 || strcmp(argv[i], "--randomize") == 0) {
                    options.randomize = true;
                }

                if (strcmp(argv[i], "-p") == 0 || strcmp(argv[i], "--report") == 0) {
                    options.generate_test_report = true;
                }

                if (strcmp(argv[i], "-s") == 0 || strcmp(argv[i], "--seed") == 0) {
                    if (i + 1 < argc) {
                        try {
                            options.random_seed = std::stoi(argv[i+1]);
                            options.random_seed_present = true;
                        } catch (const std::invalid_argument& err) {}
                    }
                }
            }
        }

        return options;
    }

    void showHelp(std::string binary)
    {
        std::cout << "usage: " << binary << " [options]" << std::endl << std::endl;
        std::cout << "Command line options:" << std::endl;
        std::cout << "    -q/--quiet: Supress output (use only . and " << ASCII_RED << "F" << ASCII_RESET << " as output)" << std::endl;
        std::cout << "    -r/--randomize: Randomize test executions" << std::endl;
        std::cout << "    -s/--seed <seed>: Inject seed for randomization uses (unsigned integer)";
        std::cout << std::endl;
    }

    void onSignalRaised(int sig)
    {
        std::string signal_as_string(strsignal(sig));

        current_test_failed = true;
        current_test_case->failure_message = "Signal raised by test (" + signal_as_string + ")";

        appendAssertionFailure(&assertion_failures, current_test_case->failure_message, current_test_case->file, current_test_case->line);

        longjmp(jump_env, 1);
    }

    void configureFittedTests(TestSuite *test_suite)
    {
        TestCase *fitted_test = NULL;

        for (TestCase *test : test_suite->test_cases) {
            if (test->fit) {
                fitted_test = test;
                break;
            }
        }

        if (!fitted_test) {
            return;
        }

        for (TestCase *test : test_suite->test_cases) {
            if (test != fitted_test) {
                test->skip = true;
            }
        } 
    }

    void configureRandomizedTests(TestSuite *test_suite, unsigned int seed)
    {
        std::cout << ASCII_BACKGROUND_MAGENTA << ASCII_BLACK << ASCII_BOLD << " SEED "
            << ASCII_RESET << " Randomizing test execution order with seed " << seed << std::endl;

        std::shuffle(test_suite->test_cases.begin(), test_suite->test_cases.end(), std::default_random_engine(seed));
    }
}


int main(int argc, const char *argv[])
{
    using namespace cest;

    int return_code = 0;
    TestSuite test_suite;

    command_line_options = parseArgs(argc, argv);

    if (command_line_options.help) {
        showHelp(argv[0]);
        return 0;
    }

    signal(SIGSEGV, cest::onSignalRaised);
    signal(SIGFPE, cest::onSignalRaised);
    signal(SIGBUS, cest::onSignalRaised);
    signal(SIGILL, cest::onSignalRaised);
    signal(SIGTERM, cest::onSignalRaised);
    signal(SIGXCPU, cest::onSignalRaised);
    signal(SIGXFSZ, cest::onSignalRaised);

    test_suite.test_suite_name = test_suite_name;
    test_suite.test_cases = test_cases;
    
    configureFittedTests(&test_suite);

    if (command_line_options.random_seed_present) {
        random_seed = command_line_options.random_seed;
    } else {
        random_seed = std::chrono::system_clock::now().time_since_epoch().count();
    }

    if (command_line_options.randomize) {
        configureRandomizedTests(&test_suite, random_seed);
    }

    if (before_all) {
        before_all();
    }

    for (TestCase *test_case : test_suite.test_cases) {
        current_test_failed = false;
        current_test_case = test_case;

        if (before_each) {
            before_each();
        }

        try {
            if (test_case->skip) {
                throw ForcedPassError();
            }

            test_case->test();
            setjmp(jump_env);
        } catch (const AssertionError& error) {
            handleFailedTest(test_case);
        } catch (const ForcedPassError& error) {
            if (after_each) {
                after_each();
            }

            printTestResult(test_case);
            continue;
        } catch (const std::exception& error) {
            handleTestException(test_case, error);
        }

        if (after_each) {
            after_each();
        }

        test_case->test_failed = current_test_failed;

        printTestResult(test_case);
    }

    if (after_all) {
        after_all();
    }

    return_code = anyTestFailed();

    if (command_line_options.generate_test_report) {
        writeTestSummaryToFile(test_suite);
    }

    for (TestCase *test_case : test_cases) {
        delete test_case;
    }

    if (command_line_options.quiet) {
        std::cout << std::endl;
    }

    return return_code;
}
